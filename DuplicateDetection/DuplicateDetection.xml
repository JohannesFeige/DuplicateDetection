<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DuplicateDetection</name>
    </assembly>
    <members>
        <member name="T:DuplicateDetection.Abstractions.File">
            <summary>
            DTO for file information
            </summary>
        </member>
        <member name="M:DuplicateDetection.Abstractions.IDuplicateDetectionService.CollectCandidates(System.String)">
            <summary>
            Collects all files in path and compares with SizeAndName as default mode.
            </summary>
            <param name="path">directory path</param>
            <returns></returns>
        </member>
        <member name="M:DuplicateDetection.Abstractions.IDuplicateDetectionService.CollectCandidates(System.String,DuplicateDetection.Abstractions.ComparisonMode)">
            <summary>
            Collects all files in path and compares with given mode.
            </summary>
            <param name="path">directory path</param>
            <param name="mode">mode for comparison</param>
            <returns></returns>
        </member>
        <member name="M:DuplicateDetection.Abstractions.IDuplicateDetectionService.VerifyCandidates(System.Collections.Generic.IEnumerable{DuplicateDetection.Abstractions.IDuplicateFile})">
            <summary>
            Verifies that possible duplicates are identical by checking MD5 hash.
            </summary>
            <param name="candidates">possible duplicates</param>
            <returns></returns>
        </member>
        <member name="T:DuplicateDetection.Abstractions.IDuplicateFile">
            <summary>
            Interface for group of duplicate files.
            </summary>
        </member>
        <member name="M:DuplicateDetection.Abstractions.IFileCrawler.CrawlFiles(System.String)">
            <summary>
            Seek files recursively in given directory path
            </summary>
            <param name="directoryPath">directory path</param>
            <returns></returns>
        </member>
        <member name="M:DuplicateDetection.Abstractions.IFileHashService.CalculateHash(System.String)">
            <summary>
            Calculates MD5 hash of a file.
            </summary>
            <param name="path">file path</param>
            <returns></returns>
        </member>
        <member name="T:DuplicateDetection.CachingFileHashService">
            <summary>
            Decorator for FileHashService with simple caching.
            </summary>
        </member>
        <member name="M:DuplicateDetection.CachingFileHashService.CalculateHash(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DuplicateDetection.DuplicateDetectionService.CollectCandidates(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DuplicateDetection.DuplicateDetectionService.CollectCandidates(System.String,DuplicateDetection.Abstractions.ComparisonMode)">
            <inheritdoc />
        </member>
        <member name="M:DuplicateDetection.DuplicateDetectionService.SimpleCompare(DuplicateDetection.Abstractions.File,DuplicateDetection.Abstractions.File,DuplicateDetection.Abstractions.ComparisonMode)">
            <summary>
            Compares files depending on comparison mode.
            </summary>
            <param name="left">left file</param>
            <param name="right">right file</param>
            <param name="mode">comparison mode</param>
            <returns></returns>
        </member>
        <member name="M:DuplicateDetection.DuplicateDetectionService.VerifyCandidates(System.Collections.Generic.IEnumerable{DuplicateDetection.Abstractions.IDuplicateFile})">
            <inheritdoc />
        </member>
        <member name="M:DuplicateDetection.DuplicateDetectionService.HashCompare(System.String,System.String)">
            <summary>
            Compares files by hash using FileHashService.
            </summary>
            <param name="left">left file</param>
            <param name="right">right file</param>
            <returns></returns>
        </member>
        <member name="T:DuplicateDetection.DuplicateDetectionService.DuplicateFileComparer">
            <inheritdoc />
        </member>
        <member name="M:DuplicateDetection.DuplicateDetectionService.DuplicateFileComparer.Equals(DuplicateDetection.Abstractions.IDuplicateFile,DuplicateDetection.Abstractions.IDuplicateFile)">
            <inheritdoc />
        </member>
        <member name="M:DuplicateDetection.DuplicateDetectionService.DuplicateFileComparer.GetHashCode(DuplicateDetection.Abstractions.IDuplicateFile)">
            <inheritdoc />
        </member>
        <member name="T:DuplicateDetection.DuplicateFile">
            <inheritdoc />
        </member>
    </members>
</doc>
